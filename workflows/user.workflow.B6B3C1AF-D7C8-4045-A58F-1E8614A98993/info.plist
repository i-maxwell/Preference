<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.alfredapp.andrew.gettingstarted.scriptfilteroutput</string>
	<key>category</key>
	<string>Tools</string>
	<key>connections</key>
	<dict>
		<key>50B0CD10-4D52-4898-9C05-DD3A34A829C3</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>4469F096-5451-45C6-8251-CAE23983E297</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Andrew Pepperrell</string>
	<key>description</key>
	<string>flush browser hosts</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>flush browser hosts</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>applescript</key>
				<string>on alfred_script(q)	if q is "Google Chrome" then		tell application "Google Chrome"			tell front window				set oldTab to active tab				set oldTabIndex to active tab index				set theTab to make new tab with properties {URL:"chrome://net-internals/#sockets"}				delay 0.2				execute theTab javascript "document.getElementById('sockets-view-flush-button').click();"				close theTab				set active tab index to oldTabIndex				reload oldTab			end tell		end tell	else if q is "QQBrowser" then		tell application "QQBrowser"			tell front window				set oldTab to active tab				set oldTabIndex to active tab index				set theTab to make new tab with properties {URL:"chrome://net-internals/#sockets"}				delay 0.2				execute theTab javascript "document.getElementById('sockets-view-flush-button').click();"
				close theTab				set active tab index to oldTabIndex				reload oldTab			end tell		end tell	end ifend alfred_script</string>
				<key>cachescript</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.applescript</string>
			<key>uid</key>
			<string>4469F096-5451-45C6-8251-CAE23983E297</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>127</integer>
				<key>keyword</key>
				<string>flush hosts</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>flush......</string>
				<key>script</key>
				<string>{"items": [
    {
        "uid": "Google Chrome",
        "title": "Google Chrome",
        "arg": "Google Chrome",
        "icon": {
            "type": "icon",
            "path": "/Applications/Google Chrome.app/Contents/Resources/app.icns"
        }
    },
	{
        "uid": "QQ浏览器",
        "title": "QQ浏览器",
        "arg": "QQBrowser",
        "icon": {
            "type": "icon",
            "path": "/Applications/QQBrowser.app/Contents/Resources/app.icns"
        }
    }
]}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string>test.sh</string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>flush browser hosts</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>50B0CD10-4D52-4898-9C05-DD3A34A829C3</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Alfred's Script Filter object is extremely powerful, and gives you control over the results displayed in Alfred.

Alfred 3 now supports JSON, which is the recommended format. XML is also supported for legacy Alfred 2 workflows, and has been updated to include the new features.

A new option now exists for Script Filters, "Alfred filters results". This allows you to return a whole list of results, let Alfred do the subsequent filtering with extreme performance. When this option is selected, your script will be called once with no argument.</string>
	<key>uidata</key>
	<dict>
		<key>4469F096-5451-45C6-8251-CAE23983E297</key>
		<dict>
			<key>xpos</key>
			<integer>330</integer>
			<key>ypos</key>
			<integer>100</integer>
		</dict>
		<key>50B0CD10-4D52-4898-9C05-DD3A34A829C3</key>
		<dict>
			<key>note</key>
			<string>Alfred 3 now supports JSON as the Script Filter output. This is the recommended output.</string>
			<key>xpos</key>
			<integer>110</integer>
			<key>ypos</key>
			<integer>100</integer>
		</dict>
	</dict>
	<key>version</key>
	<string>1.0</string>
	<key>webaddress</key>
	<string>https://www.alfredapp.com</string>
</dict>
</plist>
